#version 330 core

const int MAX_LIGHTS = 64;

struct Light
{
    vec4 position_cameraspace;
    vec4 direction_cameraspace;
    vec4 color;
    int type;
    float power;
    float kC;
    float kL;
    float kQ;
    float cosCutoff;
    float cosInner;
    float exponent;
};

// Pass in things as vec4, because vec3 are intepreted size of vec4 (16 bytes), hence, to prevent offset confusion, just pass in as vec4
layout(std140) uniform Material
{
    vec4 kAmbient;
    vec4 kDiffuse;
    vec4 kSpecular;
    float kShininess;
} material;

layout(std140) uniform LightBlock
{
    Light lights[MAX_LIGHTS];
} lightBlock;

// Interpolated values from the vertex shaders
in VERTEX_DATA{
    vec2 texCoord;
    vec3 fragmentPosition;
    vec3 norm;
}vertexDataIn;

// Output data
out vec4 frag_color;

uniform int numLights;
// uniform Light lights[MAX_LIGHTS];
uniform bool lightEnabled;
// uniform vec3 viewDir;

uniform bool u_textureEnabled;

uniform bool u_ambient_map_enabled;
uniform sampler2D u_ambient_texture0;
uniform sampler2D u_ambient_texture1;
uniform sampler2D u_ambient_texture2;
uniform sampler2D u_ambient_texture3;

uniform bool u_diffuse_map_enabled;
uniform sampler2D u_diffuse_texture0;
uniform sampler2D u_diffuse_texture1;
uniform sampler2D u_diffuse_texture2;
uniform sampler2D u_diffuse_texture3;

uniform bool u_specular_map_enabled;
uniform sampler2D u_specular_texture0;
uniform sampler2D u_specular_texture1;
uniform sampler2D u_specular_texture2;
uniform sampler2D u_specular_texture3;

uniform bool u_normal_map_enabled;
uniform sampler2D u_normal_texture0;
uniform sampler2D u_normal_texture1;
uniform sampler2D u_normal_texture2;
uniform sampler2D u_normal_texture3;

uniform bool u_textEnabled;
uniform vec3 u_textColour;

uniform float u_tilingFactor;

void main()
{
    frag_color = u_diffuse_map_enabled ? texture(u_diffuse_texture0, vertexDataIn.texCoord * u_tilingFactor) : material.kDiffuse;
}