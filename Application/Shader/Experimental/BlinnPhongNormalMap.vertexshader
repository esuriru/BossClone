#version 330 core

// Input vertex data, different for all executions of this shader.
layout(location = 0) in vec3 vertexPosition_modelspace;
layout(location = 1) in vec4 vertexColor;
layout(location = 2) in vec3 vertexNormal;
layout(location = 3) in vec2 vertexUV;
layout(location = 4) in vec3 vertexTangent;
layout(location = 5) in vec3 vertexBitangent;

// Output data ; will be interpolated for each fragment.
out VERTEX_DATA {
	vec2 texCoord;
	vec3 fragmentPosition;
    vec3 norm;
} vertexData; 

//Uniform parameters from application
uniform mat4 MVP;
uniform mat4 MV;
uniform mat4 MV_inverse_transpose;
uniform mat4 M;


void main()
{
	gl_Position = MVP * vec4(vertexPosition_modelspace,1);
	vertexData.fragmentPosition = vec3(MV * vec4(vertexPosition_modelspace, 1.0));
	vertexData.texCoord = vertexUV;
	vertexData.norm = vec3(MV_inverse_transpose * vec4(vertexNormal, 0.0));

    // mat3 MV3x3 = mat3(MV);

    vec3 T = normalize(vec3(MV * vec4(vertexTangent, 0.0)));
    vec3 B = normalize(vec3(MV * vec4(vertexBitangent, 0.0)));
    vec3 N = normalize(vec3(MV * vec4(vertexNormal, 0.0)));

    vertexData.TBN = transpose(mat3(T, B, N));
}